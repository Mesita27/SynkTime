-- ===============================================================
-- MIGRACIÓN: TABLA EMPLEADO_BIOMETRICO
-- Sistema de Enrolamiento y Verificación Biométrica SynkTime
-- ===============================================================

-- Crear directorio de migraciones si no existe
-- Esta migración crea la tabla EMPLEADO_BIOMETRICO según los requerimientos

CREATE TABLE IF NOT EXISTS EMPLEADO_BIOMETRICO (
    ID_EMPLEADO_BIOMETRICO INT AUTO_INCREMENT PRIMARY KEY,
    ID_EMPLEADO INT NOT NULL,
    TIPO_BIOMETRICO ENUM('HUELLA_DIGITAL', 'FACIAL', 'IRIS', 'VOZ') NOT NULL,
    SUBTIPO VARCHAR(50), -- Para huellas: 'PULGAR_DERECHO', 'INDICE_IZQUIERDO', etc.
    DATOS_BIOMETRICOS LONGTEXT, -- Datos codificados en base64 o referencia a archivo
    TEMPLATE_HASH VARCHAR(255), -- Hash del template para búsquedas rápidas
    PROVEEDOR_BIOMETRICO VARCHAR(100) DEFAULT 'SYNKTIME_INTERNO', -- Extensible para diferentes proveedores
    VERSION_ALGORITMO VARCHAR(20) DEFAULT '1.0',
    CALIDAD_MUESTRA INT DEFAULT 0, -- 0-100, calidad de la captura
    ACTIVO TINYINT(1) DEFAULT 1,
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    USUARIO_REGISTRO INT,
    
    -- Índices y restricciones
    FOREIGN KEY (ID_EMPLEADO) REFERENCES empleados(ID_EMPLEADO) ON DELETE CASCADE,
    INDEX idx_empleado_tipo (ID_EMPLEADO, TIPO_BIOMETRICO),
    INDEX idx_template_hash (TEMPLATE_HASH),
    INDEX idx_proveedor (PROVEEDOR_BIOMETRICO),
    UNIQUE KEY unique_empleado_biometrico (ID_EMPLEADO, TIPO_BIOMETRICO, SUBTIPO)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Tabla para logs de verificación biométrica
CREATE TABLE IF NOT EXISTS VERIFICACION_BIOMETRICA (
    ID_VERIFICACION INT AUTO_INCREMENT PRIMARY KEY,
    ID_EMPLEADO INT NOT NULL,
    ID_EMPLEADO_BIOMETRICO INT,
    TIPO_VERIFICACION ENUM('HUELLA_DIGITAL', 'FACIAL', 'TRADICIONAL') NOT NULL,
    RESULTADO_VERIFICACION TINYINT(1) DEFAULT 0, -- 0: Falló, 1: Exitoso
    PUNTUACION_COINCIDENCIA DECIMAL(5,2), -- Porcentaje de coincidencia
    TIEMPO_VERIFICACION INT, -- Milisegundos que tomó la verificación
    FOTO_VERIFICACION VARCHAR(255), -- Nombre del archivo de foto capturada durante verificación
    METADATA_VERIFICACION JSON, -- Información adicional del proceso
    IP_ORIGEN VARCHAR(45),
    USER_AGENT TEXT,
    FECHA_VERIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Índices y restricciones  
    FOREIGN KEY (ID_EMPLEADO) REFERENCES empleados(ID_EMPLEADO),
    FOREIGN KEY (ID_EMPLEADO_BIOMETRICO) REFERENCES EMPLEADO_BIOMETRICO(ID_EMPLEADO_BIOMETRICO),
    INDEX idx_empleado_fecha (ID_EMPLEADO, FECHA_VERIFICACION),
    INDEX idx_tipo_resultado (TIPO_VERIFICACION, RESULTADO_VERIFICACION)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agregar campo de verificación biométrica a tabla de asistencias si no existe
ALTER TABLE asistencias 
ADD COLUMN IF NOT EXISTS ID_VERIFICACION_BIOMETRICA INT,
ADD COLUMN IF NOT EXISTS METODO_VERIFICACION ENUM('HUELLA_DIGITAL', 'FACIAL', 'TRADICIONAL') DEFAULT 'TRADICIONAL',
ADD FOREIGN KEY (ID_VERIFICACION_BIOMETRICA) REFERENCES VERIFICACION_BIOMETRICA(ID_VERIFICACION);

-- Crear índices adicionales para optimización
CREATE INDEX IF NOT EXISTS idx_asistencias_metodo ON asistencias(METODO_VERIFICACION);
CREATE INDEX IF NOT EXISTS idx_asistencias_verificacion ON asistencias(ID_VERIFICACION_BIOMETRICA);

-- Insertar datos de migración
INSERT INTO EMPLEADO_BIOMETRICO (
    ID_EMPLEADO, 
    TIPO_BIOMETRICO, 
    SUBTIPO, 
    DATOS_BIOMETRICOS,
    PROVEEDOR_BIOMETRICO
)
SELECT 
    ID_EMPLEADO,
    CASE BIOMETRIC_TYPE
        WHEN 'fingerprint' THEN 'HUELLA_DIGITAL'
        WHEN 'facial' THEN 'FACIAL'
    END,
    FINGER_TYPE,
    BIOMETRIC_DATA,
    'SYNKTIME_INTERNO'
FROM biometric_data 
WHERE ACTIVO = 1
ON DUPLICATE KEY UPDATE 
    DATOS_BIOMETRICOS = VALUES(DATOS_BIOMETRICOS),
    FECHA_ACTUALIZACION = CURRENT_TIMESTAMP;